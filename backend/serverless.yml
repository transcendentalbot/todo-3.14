service: wellness-companion

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'dev-secret-change-in-prod'}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    TRACKING_TABLE: ${self:service}-tracking-${self:provider.stage}
    REMINDERS_TABLE: ${self:service}-reminders-${self:provider.stage}
    PHOTOS_BUCKET: ${self:service}-photos-${self:provider.stage}
    COGNITO_USER_POOL_ID: us-east-1_fTxU26uy4
    COGNITO_CLIENT_ID: 3i8iauebg4sseeh6qdlstncmh9
    VAPID_PUBLIC_KEY: ${env:VAPID_PUBLIC_KEY, 'BP83nSNqLs_KnH2iFtIvJqAIMVMQtFFlTevsgz5o1nzZHhfozU9YGXwNkpSGnIB6e_4FEnXTX9x8jxS5YcI4lqA'}
    VAPID_PRIVATE_KEY: ${env:VAPID_PRIVATE_KEY, '1-Rbe8xi9Ufmoq0CxIhJpLrl5DJustXlfbO8_2FwJW8'}
    VAPID_EMAIL: ${env:VAPID_EMAIL, 'mailto:admin@wellness-companion.com'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USERS_TABLE}
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TRACKING_TABLE}
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.REMINDERS_TABLE}
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USERS_TABLE}/index/*
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TRACKING_TABLE}/index/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
          Resource:
            - arn:aws:cognito-idp:${aws:region}:*:userpool/*
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: '*'
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${aws:region}:*:function:${self:service}-${self:provider.stage}-notificationHandler

plugins:
  - serverless-plugin-typescript

functions:
  # Auth endpoints
  register:
    handler: functions/auth/register.handler
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  login:
    handler: functions/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  profile:
    handler: functions/auth/profile.handler
    events:
      - http:
          path: user/profile
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  # Tracking endpoints
  checkin:
    handler: functions/tracking/checkin.handler
    events:
      - http:
          path: tracking/checkin
          method: post
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            name: authorizerFunc
            type: request

  photo:
    handler: functions/tracking/photo.handler
    events:
      - http:
          path: tracking/photo
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  weight:
    handler: functions/tracking/weight.handler
    events:
      - http:
          path: tracking/weight
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  supplement:
    handler: functions/tracking/supplement.handler
    events:
      - http:
          path: tracking/supplement
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  # Notification Functions
  notificationSubscribe:
    handler: functions/notifications/subscribe.handler
    events:
      - http:
          path: notifications/subscribe
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  notificationHandler:
    handler: functions/notifications/handler.handler
    environment:
      NOTIFICATION_HANDLER_FUNCTION: ${self:service}-${self:provider.stage}-notificationHandler
    events:
      - http:
          path: notifications/send
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            type: request

  scheduledNotificationTrigger:
    handler: functions/notifications/scheduledTrigger.handler
    environment:
      NOTIFICATION_HANDLER_FUNCTION: ${self:service}-${self:provider.stage}-notificationHandler
    events:
      - eventBridge:
          rule: morning-notification-rule
          detail-type:
            - morning
      - eventBridge:
          rule: lunch-notification-rule
          detail-type:
            - lunch
      - eventBridge:
          rule: supplement-notification-rule
          detail-type:
            - supplement
      - eventBridge:
          rule: evening-notification-rule
          detail-type:
            - evening

  # Authorizer
  authorizerFunc:
    handler: functions/auth/authorizer.handler

resources:
  Resources:
    # Gateway Responses for CORS
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    TrackingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRACKING_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    RemindersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REMINDERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: reminderId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: reminderId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket for photos
    PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PHOTOS_BUCKET}-${aws:accountId}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldPhotos
              Status: Enabled
              ExpirationInDays: 90
    
    # EventBridge Rules for scheduled notifications
    MorningNotificationRule:
      Type: AWS::Events::Rule
      Properties:
        Name: morning-notification-rule
        Description: Trigger morning check-in notifications at 7 AM
        ScheduleExpression: cron(0 7 * * ? *)  # 7 AM UTC daily
        State: ENABLED
        Targets:
          - Arn: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
            Id: morning-notification-target
            Input: '{"detail-type": "morning"}'
    
    LunchNotificationRule:
      Type: AWS::Events::Rule
      Properties:
        Name: lunch-notification-rule
        Description: Trigger lunch reminder notifications at 12 PM
        ScheduleExpression: cron(0 12 * * ? *)  # 12 PM UTC daily
        State: ENABLED
        Targets:
          - Arn: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
            Id: lunch-notification-target
            Input: '{"detail-type": "lunch"}'
    
    SupplementNotificationRule:
      Type: AWS::Events::Rule
      Properties:
        Name: supplement-notification-rule
        Description: Trigger supplement reminder notifications at 6 PM
        ScheduleExpression: cron(0 18 * * ? *)  # 6 PM UTC daily
        State: ENABLED
        Targets:
          - Arn: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
            Id: supplement-notification-target
            Input: '{"detail-type": "supplement"}'
    
    EveningNotificationRule:
      Type: AWS::Events::Rule
      Properties:
        Name: evening-notification-rule
        Description: Trigger evening reflection notifications at 9 PM
        ScheduleExpression: cron(0 21 * * ? *)  # 9 PM UTC daily
        State: ENABLED
        Targets:
          - Arn: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
            Id: evening-notification-target
            Input: '{"detail-type": "evening"}'
    
    # Permissions for EventBridge to invoke Lambda
    MorningNotificationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt MorningNotificationRule.Arn
    
    LunchNotificationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt LunchNotificationRule.Arn
    
    SupplementNotificationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt SupplementNotificationRule.Arn
    
    EveningNotificationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ScheduledNotificationTriggerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt EveningNotificationRule.Arn